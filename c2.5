import random

class BoardOutException(Exception):
    pass

class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y


class Ship:
    def __init__(self, length, bow, direction):
        self.length = length
        self.bow = bow
        self.direction = direction
        self.lives = length

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.length):
            if self.direction == 0:
                ship_dots.append(Dot(self.bow.x + i, self.bow.y))
            elif self.direction == 1:
                ship_dots.append(Dot(self.bow.x, self.bow.y + i))
        return ship_dots


class Board:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid
        self.field = [['O'] * size for _ in range(size)]
        self.ships = []
        self.busy = []
        self.count = 0

    def add_ship(self, ship):
        for d in ship.dots:
            if not (0 <= d.x < self.size and 0 <= d.y < self.size) or d in self.busy:
                raise BoardOutException()
        for d in ship.dots:
            self.field[d.x][d.y] = '■'
            self.busy.append(d)
        self.ships.append(ship)
        self.contour(ship)
        self.count += 1

    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x + dx, d.y + dy)
                if not (0 <= cur.x < self.size and 0 <= cur.y < self.size):
                    continue
                if cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = '.'
                    self.busy.append(cur)

    def __str__(self):
        res = '  | 1 | 2 | 3 | 4 | 5 | 6 |' + '\n'
        for i, row in enumerate(self.field, 1):
            res += f'{i} | ' + ' | '.join(row) + ' |' + '\n'
        if self.hid:
            res = res.replace('■', 'O')
        return res

    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def shot(self, d):
        if self.out(d):
            raise BoardOutException()

        if d in self.busy:
            ind = self.busy.index(d)
            self.field[d.x][d.y] = 'X'
            self.ships[ind].lives -= 1
            if self.ships[ind].lives == 0:
                self.contour(self.ships[ind], verb=True)
                self.busy = list(filter(lambda x: x not in self.ships[ind].dots, self.busy))
                self.ships.pop(ind)
                self.count -= 1
            return False
        else:
            self.field[d.x][d.y] = 'T'
            return True


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                response = self.enemy.board.shot(target)
                return response
            except BoardOutException:
                print('Выстрел за пределы поля!')
            except Exception as e:
                print(e)


class AI(Player):
    def ask(self):
        d = Dot(random.randint(0, 5), random.randint(0, 5))
        print(f'Ход компьютера: {d.x + 1} {d.y + 1}')
        return d


class User(Player):
    def ask(self):
        while True:
            cords = input('Ваш ход: ').split()
            if len(cords) != 2:
                print(' Введите 2 координаты! ')
                continue
            x, y = map(int, cords)
            return Dot(x - 1, y - 1)


class Game:
    def __init__(self):
        self.user = User(Board(), Board(hid=True))
        self.ai = AI(Board(hid=True), self.user.board)
        self.count = 0

    def random_board(self):
        board = Board(size=6)
        attempts = 0
        for l in range(3, 0, -1):
            while True:
                attempts += 1
                if attempts > 2000:
                    return self.random_board()
                bow = Dot(random.randint(0, 5), random.randint(0, 5))
                ship = Ship(l, bow, random.randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardOutException:
                    pass
        board.busy = []
        return board

    def greet(self):
        print("-------------------")
        print("  Приветствуем вас в игре 'Морской бой'  ")
        print("-------------------")
        print(" Формат ввода: x y ")
        print(" x - номер строки  ")
        print(" y - номер столбца ")

    def loop(self):
        num = 0
        while True:
            print('-' * 20)
            print('Доска пользователя:')
            print(self.user.board)
            print('-' * 20)
            print('Доска компьютера:')
            print(self.ai.board)
            print('-' * 20)

            if num % 2 == 0:
                print('Ходит пользователь:')
                if self.user.move():
                    num -= 1
            else:
                print('Ходит компьютер:')
                if self.ai.move():
                    num -= 1

            if self.ai.board.count == 0:
                print('Вы выиграли!')
                break
            if self.user.board.count == 0:
                print('Вы проиграли!')
                break
            num += 1

    def start(self):
        self.greet()
        self.loop()


g = Game()
g.start()
